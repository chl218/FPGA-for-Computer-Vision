-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fire2_expand1x1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    matrix_e1x1_i_0_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    matrix_e1x1_i_0_V_empty_n : IN STD_LOGIC;
    matrix_e1x1_i_0_V_read : OUT STD_LOGIC;
    matrix_e1x1_i_1_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    matrix_e1x1_i_1_V_empty_n : IN STD_LOGIC;
    matrix_e1x1_i_1_V_read : OUT STD_LOGIC;
    matrix_e1x1_i_2_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    matrix_e1x1_i_2_V_empty_n : IN STD_LOGIC;
    matrix_e1x1_i_2_V_read : OUT STD_LOGIC;
    matrix_e1x1_i_3_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    matrix_e1x1_i_3_V_empty_n : IN STD_LOGIC;
    matrix_e1x1_i_3_V_read : OUT STD_LOGIC;
    matrix_e1x1_i_4_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    matrix_e1x1_i_4_V_empty_n : IN STD_LOGIC;
    matrix_e1x1_i_4_V_read : OUT STD_LOGIC;
    matrix_e1x1_i_5_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    matrix_e1x1_i_5_V_empty_n : IN STD_LOGIC;
    matrix_e1x1_i_5_V_read : OUT STD_LOGIC;
    matrix_e1x1_i_6_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    matrix_e1x1_i_6_V_empty_n : IN STD_LOGIC;
    matrix_e1x1_i_6_V_read : OUT STD_LOGIC;
    matrix_e1x1_i_7_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    matrix_e1x1_i_7_V_empty_n : IN STD_LOGIC;
    matrix_e1x1_i_7_V_read : OUT STD_LOGIC;
    matrix_e1x1_i_8_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    matrix_e1x1_i_8_V_empty_n : IN STD_LOGIC;
    matrix_e1x1_i_8_V_read : OUT STD_LOGIC;
    matrix_e1x1_i_9_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    matrix_e1x1_i_9_V_empty_n : IN STD_LOGIC;
    matrix_e1x1_i_9_V_read : OUT STD_LOGIC;
    matrix_e1x1_i_10_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    matrix_e1x1_i_10_V_empty_n : IN STD_LOGIC;
    matrix_e1x1_i_10_V_read : OUT STD_LOGIC;
    matrix_e1x1_i_11_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    matrix_e1x1_i_11_V_empty_n : IN STD_LOGIC;
    matrix_e1x1_i_11_V_read : OUT STD_LOGIC;
    matrix_e1x1_i_12_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    matrix_e1x1_i_12_V_empty_n : IN STD_LOGIC;
    matrix_e1x1_i_12_V_read : OUT STD_LOGIC;
    matrix_e1x1_i_13_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    matrix_e1x1_i_13_V_empty_n : IN STD_LOGIC;
    matrix_e1x1_i_13_V_read : OUT STD_LOGIC;
    matrix_e1x1_i_14_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    matrix_e1x1_i_14_V_empty_n : IN STD_LOGIC;
    matrix_e1x1_i_14_V_read : OUT STD_LOGIC;
    matrix_e1x1_i_15_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    matrix_e1x1_i_15_V_empty_n : IN STD_LOGIC;
    matrix_e1x1_i_15_V_read : OUT STD_LOGIC );
end;


architecture behav of fire2_expand1x1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_37 : STD_LOGIC_VECTOR (5 downto 0) := "110111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_23 : BOOLEAN;
    signal r_1_fu_237_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_1_reg_274 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_101 : BOOLEAN;
    signal c_1_fu_249_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_1_reg_282 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_110 : BOOLEAN;
    signal d_4_fu_261_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_119 : BOOLEAN;
    signal exitcond2_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_122_fu_267_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_bdd_247 : BOOLEAN;
    signal r_reg_198 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond3_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_260 : BOOLEAN;
    signal c_reg_209 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond4_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_reg_220 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond4_fu_231_p2)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- c_reg_209 assign process. --
    c_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not(ap_sig_bdd_247) and not((exitcond2_fu_255_p2 = ap_const_lv1_0)))) then 
                c_reg_209 <= c_1_reg_282;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (ap_const_lv1_0 = exitcond4_fu_231_p2))) then 
                c_reg_209 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    -- d_reg_220 assign process. --
    d_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond2_fu_255_p2 = ap_const_lv1_0) and not(ap_sig_bdd_247))) then 
                d_reg_220 <= d_4_fu_261_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = exitcond3_fu_243_p2))) then 
                d_reg_220 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- r_reg_198 assign process. --
    r_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_260))) then 
                r_reg_198 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ap_const_lv1_0 = exitcond3_fu_243_p2)))) then 
                r_reg_198 <= r_1_reg_274;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                c_1_reg_282 <= c_1_fu_249_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                r_1_reg_274 <= r_1_fu_237_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond2_fu_255_p2, ap_sig_bdd_247, exitcond3_fu_243_p2, ap_sig_bdd_260, exitcond4_fu_231_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not(ap_sig_bdd_260)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond4_fu_231_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_243_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                if ((not(ap_sig_bdd_247) and not((exitcond2_fu_255_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                elsif (((exitcond2_fu_255_p2 = ap_const_lv1_0) and not(ap_sig_bdd_247))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st2_fsm_1, exitcond4_fu_231_p2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond4_fu_231_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond4_fu_231_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((ap_const_lv1_0 = exitcond4_fu_231_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_101 assign process. --
    ap_sig_bdd_101_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_101 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_110 assign process. --
    ap_sig_bdd_110_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_110 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_119 assign process. --
    ap_sig_bdd_119_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_119 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_23 assign process. --
    ap_sig_bdd_23_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_23 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_247 assign process. --
    ap_sig_bdd_247_assign_proc : process(matrix_e1x1_i_0_V_empty_n, matrix_e1x1_i_1_V_empty_n, matrix_e1x1_i_2_V_empty_n, matrix_e1x1_i_3_V_empty_n, matrix_e1x1_i_4_V_empty_n, matrix_e1x1_i_5_V_empty_n, matrix_e1x1_i_6_V_empty_n, matrix_e1x1_i_7_V_empty_n, matrix_e1x1_i_8_V_empty_n, matrix_e1x1_i_9_V_empty_n, matrix_e1x1_i_10_V_empty_n, matrix_e1x1_i_11_V_empty_n, matrix_e1x1_i_12_V_empty_n, matrix_e1x1_i_13_V_empty_n, matrix_e1x1_i_14_V_empty_n, matrix_e1x1_i_15_V_empty_n, exitcond2_fu_255_p2, tmp_122_fu_267_p1)
    begin
                ap_sig_bdd_247 <= (((matrix_e1x1_i_14_V_empty_n = ap_const_logic_0) and (exitcond2_fu_255_p2 = ap_const_lv1_0) and (tmp_122_fu_267_p1 = ap_const_lv4_E)) or ((exitcond2_fu_255_p2 = ap_const_lv1_0) and (matrix_e1x1_i_13_V_empty_n = ap_const_logic_0) and (tmp_122_fu_267_p1 = ap_const_lv4_D)) or ((exitcond2_fu_255_p2 = ap_const_lv1_0) and (matrix_e1x1_i_12_V_empty_n = ap_const_logic_0) and (tmp_122_fu_267_p1 = ap_const_lv4_C)) or ((exitcond2_fu_255_p2 = ap_const_lv1_0) and (matrix_e1x1_i_11_V_empty_n = ap_const_logic_0) and (tmp_122_fu_267_p1 = ap_const_lv4_B)) or ((exitcond2_fu_255_p2 = ap_const_lv1_0) and (matrix_e1x1_i_10_V_empty_n = ap_const_logic_0) and (tmp_122_fu_267_p1 = ap_const_lv4_A)) or ((exitcond2_fu_255_p2 = ap_const_lv1_0) and (matrix_e1x1_i_9_V_empty_n = ap_const_logic_0) and (tmp_122_fu_267_p1 = ap_const_lv4_9)) or ((exitcond2_fu_255_p2 = ap_const_lv1_0) and (matrix_e1x1_i_8_V_empty_n = ap_const_logic_0) and (tmp_122_fu_267_p1 = ap_const_lv4_8)) or ((exitcond2_fu_255_p2 = ap_const_lv1_0) and (matrix_e1x1_i_7_V_empty_n = ap_const_logic_0) and (tmp_122_fu_267_p1 = ap_const_lv4_7)) or ((exitcond2_fu_255_p2 = ap_const_lv1_0) and (matrix_e1x1_i_6_V_empty_n = ap_const_logic_0) and (tmp_122_fu_267_p1 = ap_const_lv4_6)) or ((exitcond2_fu_255_p2 = ap_const_lv1_0) and (matrix_e1x1_i_5_V_empty_n = ap_const_logic_0) and (tmp_122_fu_267_p1 = ap_const_lv4_5)) or ((exitcond2_fu_255_p2 = ap_const_lv1_0) and (matrix_e1x1_i_4_V_empty_n = ap_const_logic_0) and (tmp_122_fu_267_p1 = ap_const_lv4_4)) or ((exitcond2_fu_255_p2 = ap_const_lv1_0) and (matrix_e1x1_i_3_V_empty_n = ap_const_logic_0) and (tmp_122_fu_267_p1 = ap_const_lv4_3)) or ((exitcond2_fu_255_p2 = ap_const_lv1_0) and (matrix_e1x1_i_2_V_empty_n = ap_const_logic_0) and (tmp_122_fu_267_p1 = ap_const_lv4_2)) or ((exitcond2_fu_255_p2 = ap_const_lv1_0) and (matrix_e1x1_i_1_V_empty_n = ap_const_logic_0) and (tmp_122_fu_267_p1 = ap_const_lv4_1)) or ((exitcond2_fu_255_p2 = ap_const_lv1_0) and (matrix_e1x1_i_0_V_empty_n = ap_const_logic_0) and (tmp_122_fu_267_p1 = ap_const_lv4_0)) or ((exitcond2_fu_255_p2 = ap_const_lv1_0) and (matrix_e1x1_i_15_V_empty_n = ap_const_logic_0) and not((tmp_122_fu_267_p1 = ap_const_lv4_E)) and not((tmp_122_fu_267_p1 = ap_const_lv4_D)) and not((tmp_122_fu_267_p1 = ap_const_lv4_C)) and not((tmp_122_fu_267_p1 = ap_const_lv4_B)) and not((tmp_122_fu_267_p1 = ap_const_lv4_A)) and not((tmp_122_fu_267_p1 = ap_const_lv4_9)) and not((tmp_122_fu_267_p1 = ap_const_lv4_8)) and not((tmp_122_fu_267_p1 = ap_const_lv4_7)) and not((tmp_122_fu_267_p1 = ap_const_lv4_6)) and not((tmp_122_fu_267_p1 = ap_const_lv4_5)) and not((tmp_122_fu_267_p1 = ap_const_lv4_4)) and not((tmp_122_fu_267_p1 = ap_const_lv4_3)) and not((tmp_122_fu_267_p1 = ap_const_lv4_2)) and not((tmp_122_fu_267_p1 = ap_const_lv4_1)) and not((tmp_122_fu_267_p1 = ap_const_lv4_0))));
    end process;


    -- ap_sig_bdd_260 assign process. --
    ap_sig_bdd_260_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_sig_bdd_260 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_23)
    begin
        if (ap_sig_bdd_23) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_101)
    begin
        if (ap_sig_bdd_101) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_110)
    begin
        if (ap_sig_bdd_110) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_119)
    begin
        if (ap_sig_bdd_119) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;

    c_1_fu_249_p2 <= std_logic_vector(unsigned(c_reg_209) + unsigned(ap_const_lv6_1));
    d_4_fu_261_p2 <= std_logic_vector(unsigned(d_reg_220) + unsigned(ap_const_lv5_1));
    exitcond2_fu_255_p2 <= "1" when (d_reg_220 = ap_const_lv5_10) else "0";
    exitcond3_fu_243_p2 <= "1" when (c_reg_209 = ap_const_lv6_37) else "0";
    exitcond4_fu_231_p2 <= "1" when (r_reg_198 = ap_const_lv6_37) else "0";

    -- matrix_e1x1_i_0_V_read assign process. --
    matrix_e1x1_i_0_V_read_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_255_p2, tmp_122_fu_267_p1, ap_sig_bdd_247)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond2_fu_255_p2 = ap_const_lv1_0) and (tmp_122_fu_267_p1 = ap_const_lv4_0) and not(ap_sig_bdd_247))) then 
            matrix_e1x1_i_0_V_read <= ap_const_logic_1;
        else 
            matrix_e1x1_i_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e1x1_i_10_V_read assign process. --
    matrix_e1x1_i_10_V_read_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_255_p2, tmp_122_fu_267_p1, ap_sig_bdd_247)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond2_fu_255_p2 = ap_const_lv1_0) and (tmp_122_fu_267_p1 = ap_const_lv4_A) and not(ap_sig_bdd_247))) then 
            matrix_e1x1_i_10_V_read <= ap_const_logic_1;
        else 
            matrix_e1x1_i_10_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e1x1_i_11_V_read assign process. --
    matrix_e1x1_i_11_V_read_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_255_p2, tmp_122_fu_267_p1, ap_sig_bdd_247)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond2_fu_255_p2 = ap_const_lv1_0) and (tmp_122_fu_267_p1 = ap_const_lv4_B) and not(ap_sig_bdd_247))) then 
            matrix_e1x1_i_11_V_read <= ap_const_logic_1;
        else 
            matrix_e1x1_i_11_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e1x1_i_12_V_read assign process. --
    matrix_e1x1_i_12_V_read_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_255_p2, tmp_122_fu_267_p1, ap_sig_bdd_247)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond2_fu_255_p2 = ap_const_lv1_0) and (tmp_122_fu_267_p1 = ap_const_lv4_C) and not(ap_sig_bdd_247))) then 
            matrix_e1x1_i_12_V_read <= ap_const_logic_1;
        else 
            matrix_e1x1_i_12_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e1x1_i_13_V_read assign process. --
    matrix_e1x1_i_13_V_read_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_255_p2, tmp_122_fu_267_p1, ap_sig_bdd_247)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond2_fu_255_p2 = ap_const_lv1_0) and (tmp_122_fu_267_p1 = ap_const_lv4_D) and not(ap_sig_bdd_247))) then 
            matrix_e1x1_i_13_V_read <= ap_const_logic_1;
        else 
            matrix_e1x1_i_13_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e1x1_i_14_V_read assign process. --
    matrix_e1x1_i_14_V_read_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_255_p2, tmp_122_fu_267_p1, ap_sig_bdd_247)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond2_fu_255_p2 = ap_const_lv1_0) and (tmp_122_fu_267_p1 = ap_const_lv4_E) and not(ap_sig_bdd_247))) then 
            matrix_e1x1_i_14_V_read <= ap_const_logic_1;
        else 
            matrix_e1x1_i_14_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e1x1_i_15_V_read assign process. --
    matrix_e1x1_i_15_V_read_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_255_p2, tmp_122_fu_267_p1, ap_sig_bdd_247)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond2_fu_255_p2 = ap_const_lv1_0) and not((tmp_122_fu_267_p1 = ap_const_lv4_E)) and not((tmp_122_fu_267_p1 = ap_const_lv4_D)) and not((tmp_122_fu_267_p1 = ap_const_lv4_C)) and not((tmp_122_fu_267_p1 = ap_const_lv4_B)) and not((tmp_122_fu_267_p1 = ap_const_lv4_A)) and not((tmp_122_fu_267_p1 = ap_const_lv4_9)) and not((tmp_122_fu_267_p1 = ap_const_lv4_8)) and not((tmp_122_fu_267_p1 = ap_const_lv4_7)) and not((tmp_122_fu_267_p1 = ap_const_lv4_6)) and not((tmp_122_fu_267_p1 = ap_const_lv4_5)) and not((tmp_122_fu_267_p1 = ap_const_lv4_4)) and not((tmp_122_fu_267_p1 = ap_const_lv4_3)) and not((tmp_122_fu_267_p1 = ap_const_lv4_2)) and not((tmp_122_fu_267_p1 = ap_const_lv4_1)) and not((tmp_122_fu_267_p1 = ap_const_lv4_0)) and not(ap_sig_bdd_247))) then 
            matrix_e1x1_i_15_V_read <= ap_const_logic_1;
        else 
            matrix_e1x1_i_15_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e1x1_i_1_V_read assign process. --
    matrix_e1x1_i_1_V_read_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_255_p2, tmp_122_fu_267_p1, ap_sig_bdd_247)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond2_fu_255_p2 = ap_const_lv1_0) and (tmp_122_fu_267_p1 = ap_const_lv4_1) and not(ap_sig_bdd_247))) then 
            matrix_e1x1_i_1_V_read <= ap_const_logic_1;
        else 
            matrix_e1x1_i_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e1x1_i_2_V_read assign process. --
    matrix_e1x1_i_2_V_read_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_255_p2, tmp_122_fu_267_p1, ap_sig_bdd_247)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond2_fu_255_p2 = ap_const_lv1_0) and (tmp_122_fu_267_p1 = ap_const_lv4_2) and not(ap_sig_bdd_247))) then 
            matrix_e1x1_i_2_V_read <= ap_const_logic_1;
        else 
            matrix_e1x1_i_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e1x1_i_3_V_read assign process. --
    matrix_e1x1_i_3_V_read_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_255_p2, tmp_122_fu_267_p1, ap_sig_bdd_247)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond2_fu_255_p2 = ap_const_lv1_0) and (tmp_122_fu_267_p1 = ap_const_lv4_3) and not(ap_sig_bdd_247))) then 
            matrix_e1x1_i_3_V_read <= ap_const_logic_1;
        else 
            matrix_e1x1_i_3_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e1x1_i_4_V_read assign process. --
    matrix_e1x1_i_4_V_read_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_255_p2, tmp_122_fu_267_p1, ap_sig_bdd_247)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond2_fu_255_p2 = ap_const_lv1_0) and (tmp_122_fu_267_p1 = ap_const_lv4_4) and not(ap_sig_bdd_247))) then 
            matrix_e1x1_i_4_V_read <= ap_const_logic_1;
        else 
            matrix_e1x1_i_4_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e1x1_i_5_V_read assign process. --
    matrix_e1x1_i_5_V_read_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_255_p2, tmp_122_fu_267_p1, ap_sig_bdd_247)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond2_fu_255_p2 = ap_const_lv1_0) and (tmp_122_fu_267_p1 = ap_const_lv4_5) and not(ap_sig_bdd_247))) then 
            matrix_e1x1_i_5_V_read <= ap_const_logic_1;
        else 
            matrix_e1x1_i_5_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e1x1_i_6_V_read assign process. --
    matrix_e1x1_i_6_V_read_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_255_p2, tmp_122_fu_267_p1, ap_sig_bdd_247)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond2_fu_255_p2 = ap_const_lv1_0) and (tmp_122_fu_267_p1 = ap_const_lv4_6) and not(ap_sig_bdd_247))) then 
            matrix_e1x1_i_6_V_read <= ap_const_logic_1;
        else 
            matrix_e1x1_i_6_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e1x1_i_7_V_read assign process. --
    matrix_e1x1_i_7_V_read_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_255_p2, tmp_122_fu_267_p1, ap_sig_bdd_247)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond2_fu_255_p2 = ap_const_lv1_0) and (tmp_122_fu_267_p1 = ap_const_lv4_7) and not(ap_sig_bdd_247))) then 
            matrix_e1x1_i_7_V_read <= ap_const_logic_1;
        else 
            matrix_e1x1_i_7_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e1x1_i_8_V_read assign process. --
    matrix_e1x1_i_8_V_read_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_255_p2, tmp_122_fu_267_p1, ap_sig_bdd_247)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond2_fu_255_p2 = ap_const_lv1_0) and (tmp_122_fu_267_p1 = ap_const_lv4_8) and not(ap_sig_bdd_247))) then 
            matrix_e1x1_i_8_V_read <= ap_const_logic_1;
        else 
            matrix_e1x1_i_8_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e1x1_i_9_V_read assign process. --
    matrix_e1x1_i_9_V_read_assign_proc : process(ap_sig_cseq_ST_st4_fsm_3, exitcond2_fu_255_p2, tmp_122_fu_267_p1, ap_sig_bdd_247)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (exitcond2_fu_255_p2 = ap_const_lv1_0) and (tmp_122_fu_267_p1 = ap_const_lv4_9) and not(ap_sig_bdd_247))) then 
            matrix_e1x1_i_9_V_read <= ap_const_logic_1;
        else 
            matrix_e1x1_i_9_V_read <= ap_const_logic_0;
        end if; 
    end process;

    r_1_fu_237_p2 <= std_logic_vector(unsigned(r_reg_198) + unsigned(ap_const_lv6_1));
    tmp_122_fu_267_p1 <= d_reg_220(4 - 1 downto 0);
end behav;
