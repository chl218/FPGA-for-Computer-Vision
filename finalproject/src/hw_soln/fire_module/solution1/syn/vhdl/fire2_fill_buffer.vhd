-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.4
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fire2_fill_buffer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    matrix_e3x3_i_0_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    matrix_e3x3_i_0_V_empty_n : IN STD_LOGIC;
    matrix_e3x3_i_0_V_read : OUT STD_LOGIC;
    matrix_e3x3_i_1_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    matrix_e3x3_i_1_V_empty_n : IN STD_LOGIC;
    matrix_e3x3_i_1_V_read : OUT STD_LOGIC;
    matrix_e3x3_i_2_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    matrix_e3x3_i_2_V_empty_n : IN STD_LOGIC;
    matrix_e3x3_i_2_V_read : OUT STD_LOGIC;
    matrix_e3x3_i_3_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    matrix_e3x3_i_3_V_empty_n : IN STD_LOGIC;
    matrix_e3x3_i_3_V_read : OUT STD_LOGIC;
    matrix_e3x3_i_4_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    matrix_e3x3_i_4_V_empty_n : IN STD_LOGIC;
    matrix_e3x3_i_4_V_read : OUT STD_LOGIC;
    matrix_e3x3_i_5_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    matrix_e3x3_i_5_V_empty_n : IN STD_LOGIC;
    matrix_e3x3_i_5_V_read : OUT STD_LOGIC;
    matrix_e3x3_i_6_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    matrix_e3x3_i_6_V_empty_n : IN STD_LOGIC;
    matrix_e3x3_i_6_V_read : OUT STD_LOGIC;
    matrix_e3x3_i_7_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    matrix_e3x3_i_7_V_empty_n : IN STD_LOGIC;
    matrix_e3x3_i_7_V_read : OUT STD_LOGIC;
    matrix_e3x3_i_8_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    matrix_e3x3_i_8_V_empty_n : IN STD_LOGIC;
    matrix_e3x3_i_8_V_read : OUT STD_LOGIC;
    matrix_e3x3_i_9_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    matrix_e3x3_i_9_V_empty_n : IN STD_LOGIC;
    matrix_e3x3_i_9_V_read : OUT STD_LOGIC;
    matrix_e3x3_i_10_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    matrix_e3x3_i_10_V_empty_n : IN STD_LOGIC;
    matrix_e3x3_i_10_V_read : OUT STD_LOGIC;
    matrix_e3x3_i_11_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    matrix_e3x3_i_11_V_empty_n : IN STD_LOGIC;
    matrix_e3x3_i_11_V_read : OUT STD_LOGIC;
    matrix_e3x3_i_12_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    matrix_e3x3_i_12_V_empty_n : IN STD_LOGIC;
    matrix_e3x3_i_12_V_read : OUT STD_LOGIC;
    matrix_e3x3_i_13_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    matrix_e3x3_i_13_V_empty_n : IN STD_LOGIC;
    matrix_e3x3_i_13_V_read : OUT STD_LOGIC;
    matrix_e3x3_i_14_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    matrix_e3x3_i_14_V_empty_n : IN STD_LOGIC;
    matrix_e3x3_i_14_V_read : OUT STD_LOGIC;
    matrix_e3x3_i_15_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    matrix_e3x3_i_15_V_empty_n : IN STD_LOGIC;
    matrix_e3x3_i_15_V_read : OUT STD_LOGIC;
    line_buffer_0_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    line_buffer_0_0_ce0 : OUT STD_LOGIC;
    line_buffer_0_0_we0 : OUT STD_LOGIC;
    line_buffer_0_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    line_buffer_0_54_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    line_buffer_0_54_ce0 : OUT STD_LOGIC;
    line_buffer_0_54_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    line_buffer_1_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    line_buffer_1_0_ce0 : OUT STD_LOGIC;
    line_buffer_1_0_we0 : OUT STD_LOGIC;
    line_buffer_1_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    line_buffer_1_54_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    line_buffer_1_54_ce0 : OUT STD_LOGIC;
    line_buffer_1_54_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    line_buffer_2_0_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    line_buffer_2_0_ce0 : OUT STD_LOGIC;
    line_buffer_2_0_we0 : OUT STD_LOGIC;
    line_buffer_2_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    line_buffer_2_54_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    line_buffer_2_54_ce0 : OUT STD_LOGIC;
    line_buffer_2_54_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    window_buffer_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    window_buffer_ce0 : OUT STD_LOGIC;
    window_buffer_we0 : OUT STD_LOGIC;
    window_buffer_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    window_buffer_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    window_buffer_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    window_buffer_ce1 : OUT STD_LOGIC;
    window_buffer_we1 : OUT STD_LOGIC;
    window_buffer_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    window_buffer_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of fire2_fill_buffer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_pp0_stg1_fsm_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_pp0_stg2_fsm_3 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_pp0_stg3_fsm_4 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_pp0_stg4_fsm_5 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_pp0_stg5_fsm_6 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_pp0_stg6_fsm_7 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_st11_fsm_8 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv59_5 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv59_1 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv59_2 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv59_3 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv59_4 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv8_90 : STD_LOGIC_VECTOR (7 downto 0) := "10010000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_27 : BOOLEAN;
    signal d_reg_514 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_686 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_159 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond2_reg_686_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal d_1_fu_570_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal d_1_reg_690 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_695 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_67_fu_582_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_67_reg_704 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_ppstg_tmp_67_reg_704_pp0_it1 : STD_LOGIC_VECTOR (4 downto 0);
    signal window_buffer_addr_reg_710 : STD_LOGIC_VECTOR (7 downto 0);
    signal window_buffer_addr_10_reg_716 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_104_fu_602_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_104_reg_732 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_70_fu_610_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_70_reg_736 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_198 : BOOLEAN;
    signal ap_sig_bdd_323 : BOOLEAN;
    signal line_buffer_1_54_load_reg_741 : STD_LOGIC_VECTOR (15 downto 0);
    signal line_buffer_0_54_load_reg_748 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_buffer_load_reg_835 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_buffer_load_1_reg_840 : STD_LOGIC_VECTOR (15 downto 0);
    signal window_buffer_addr_1_reg_845 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_pp0_stg2_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_390 : BOOLEAN;
    signal line_buffer_2_54_load_reg_855 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_pp0_stg3_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_401 : BOOLEAN;
    signal tmp_73_fu_668_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_73_reg_860 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_pp0_stg5_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_411 : BOOLEAN;
    signal ap_sig_cseq_ST_pp0_stg6_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_424 : BOOLEAN;
    signal d_phi_fu_518_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_phiprechg_tmp_4_reg_526pp0_it0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_67_cast_fu_588_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_74_fu_593_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_71_cast_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_cast_fu_623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_68_fu_628_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_pp0_stg4_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_473 : BOOLEAN;
    signal tmp_69_fu_637_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_71_fu_650_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_72_fu_659_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_75_cast_fu_674_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_73_cast_fu_681_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_cast1_fu_606_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_69_cast1_fu_620_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_646_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_73_cast1_fu_678_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_596 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_bdd_660 : BOOLEAN;
    signal ap_sig_bdd_382 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond2_fu_564_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((exitcond2_reg_686 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7) and not((exitcond2_reg_686 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_phiprechg_tmp_4_reg_526pp0_it0 assign process. --
    ap_reg_phiprechg_tmp_4_reg_526pp0_it0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_382) then
                if ((tmp_104_reg_732 = ap_const_lv4_0)) then 
                    ap_reg_phiprechg_tmp_4_reg_526pp0_it0 <= matrix_e3x3_i_0_V_dout;
                elsif ((tmp_104_reg_732 = ap_const_lv4_1)) then 
                    ap_reg_phiprechg_tmp_4_reg_526pp0_it0 <= matrix_e3x3_i_1_V_dout;
                elsif ((tmp_104_reg_732 = ap_const_lv4_2)) then 
                    ap_reg_phiprechg_tmp_4_reg_526pp0_it0 <= matrix_e3x3_i_2_V_dout;
                elsif ((tmp_104_reg_732 = ap_const_lv4_3)) then 
                    ap_reg_phiprechg_tmp_4_reg_526pp0_it0 <= matrix_e3x3_i_3_V_dout;
                elsif ((tmp_104_reg_732 = ap_const_lv4_4)) then 
                    ap_reg_phiprechg_tmp_4_reg_526pp0_it0 <= matrix_e3x3_i_4_V_dout;
                elsif ((tmp_104_reg_732 = ap_const_lv4_5)) then 
                    ap_reg_phiprechg_tmp_4_reg_526pp0_it0 <= matrix_e3x3_i_5_V_dout;
                elsif ((tmp_104_reg_732 = ap_const_lv4_6)) then 
                    ap_reg_phiprechg_tmp_4_reg_526pp0_it0 <= matrix_e3x3_i_6_V_dout;
                elsif ((tmp_104_reg_732 = ap_const_lv4_7)) then 
                    ap_reg_phiprechg_tmp_4_reg_526pp0_it0 <= matrix_e3x3_i_7_V_dout;
                elsif ((tmp_104_reg_732 = ap_const_lv4_8)) then 
                    ap_reg_phiprechg_tmp_4_reg_526pp0_it0 <= matrix_e3x3_i_8_V_dout;
                elsif ((tmp_104_reg_732 = ap_const_lv4_9)) then 
                    ap_reg_phiprechg_tmp_4_reg_526pp0_it0 <= matrix_e3x3_i_9_V_dout;
                elsif ((tmp_104_reg_732 = ap_const_lv4_A)) then 
                    ap_reg_phiprechg_tmp_4_reg_526pp0_it0 <= matrix_e3x3_i_10_V_dout;
                elsif ((tmp_104_reg_732 = ap_const_lv4_B)) then 
                    ap_reg_phiprechg_tmp_4_reg_526pp0_it0 <= matrix_e3x3_i_11_V_dout;
                elsif ((tmp_104_reg_732 = ap_const_lv4_C)) then 
                    ap_reg_phiprechg_tmp_4_reg_526pp0_it0 <= matrix_e3x3_i_12_V_dout;
                elsif ((tmp_104_reg_732 = ap_const_lv4_D)) then 
                    ap_reg_phiprechg_tmp_4_reg_526pp0_it0 <= matrix_e3x3_i_13_V_dout;
                elsif ((tmp_104_reg_732 = ap_const_lv4_E)) then 
                    ap_reg_phiprechg_tmp_4_reg_526pp0_it0 <= matrix_e3x3_i_14_V_dout;
                elsif (ap_sig_bdd_660) then 
                    ap_reg_phiprechg_tmp_4_reg_526pp0_it0 <= matrix_e3x3_i_15_V_dout;
                end if;
            end if; 
        end if;
    end process;

    -- d_reg_514 assign process. --
    d_reg_514_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond2_reg_686 = ap_const_lv1_0))) then 
                d_reg_514 <= d_1_reg_690;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                d_reg_514 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                ap_reg_ppstg_exitcond2_reg_686_pp0_it1 <= exitcond2_reg_686;
                ap_reg_ppstg_tmp_67_reg_704_pp0_it1 <= tmp_67_reg_704;
                exitcond2_reg_686 <= exitcond2_fu_564_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                d_1_reg_690 <= d_1_fu_570_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond2_reg_686 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323)))) then
                line_buffer_0_54_load_reg_748 <= line_buffer_0_54_q0;
                line_buffer_1_54_load_reg_741 <= line_buffer_1_54_q0;
                tmp_70_reg_736 <= tmp_70_fu_610_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_reg_686 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then
                line_buffer_2_54_load_reg_855 <= line_buffer_2_54_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond2_fu_564_p2 = ap_const_lv1_0))) then
                tmp_104_reg_732 <= tmp_104_fu_602_p1;
                tmp_67_reg_704 <= tmp_67_fu_582_p2;
                    tmp_reg_695(4 downto 0) <= tmp_fu_576_p1(4 downto 0);
                    window_buffer_addr_10_reg_716(4 downto 0) <= tmp_74_fu_593_p3(8 - 1 downto 0)(4 downto 0);
                    window_buffer_addr_reg_710(4 downto 0) <= tmp_67_cast_fu_588_p1(8 - 1 downto 0)(4 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_reg_686 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6))) then
                tmp_73_reg_860 <= tmp_73_fu_668_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_reg_686 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then
                    window_buffer_addr_1_reg_845(4 downto 0) <= tmp_reg_695(8 - 1 downto 0)(4 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond2_reg_686 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323)))) then
                window_buffer_load_1_reg_840 <= window_buffer_q1;
                window_buffer_load_reg_835 <= window_buffer_q0;
            end if;
        end if;
    end process;
    tmp_reg_695(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    window_buffer_addr_reg_710(7 downto 5) <= "000";
    window_buffer_addr_10_reg_716(7 downto 5) <= "101";
    window_buffer_addr_1_reg_845(7 downto 5) <= "000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond2_fu_564_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_323)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond2_fu_564_p2 = ap_const_lv1_0)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_8;
                end if;
            when ap_ST_pp0_stg1_fsm_2 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323)) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg2_fsm_3;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                end if;
            when ap_ST_pp0_stg2_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp0_stg3_fsm_4;
            when ap_ST_pp0_stg3_fsm_4 => 
                ap_NS_fsm <= ap_ST_pp0_stg4_fsm_5;
            when ap_ST_pp0_stg4_fsm_5 => 
                ap_NS_fsm <= ap_ST_pp0_stg5_fsm_6;
            when ap_ST_pp0_stg5_fsm_6 => 
                ap_NS_fsm <= ap_ST_pp0_stg6_fsm_7;
            when ap_ST_pp0_stg6_fsm_7 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
            when ap_ST_st11_fsm_8 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st11_fsm_8)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st11_fsm_8)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_159 assign process. --
    ap_sig_bdd_159_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_159 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_198 assign process. --
    ap_sig_bdd_198_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_198 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_27 assign process. --
    ap_sig_bdd_27_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_27 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_323 assign process. --
    ap_sig_bdd_323_assign_proc : process(matrix_e3x3_i_0_V_empty_n, matrix_e3x3_i_1_V_empty_n, matrix_e3x3_i_2_V_empty_n, matrix_e3x3_i_3_V_empty_n, matrix_e3x3_i_4_V_empty_n, matrix_e3x3_i_5_V_empty_n, matrix_e3x3_i_6_V_empty_n, matrix_e3x3_i_7_V_empty_n, matrix_e3x3_i_8_V_empty_n, matrix_e3x3_i_9_V_empty_n, matrix_e3x3_i_10_V_empty_n, matrix_e3x3_i_11_V_empty_n, matrix_e3x3_i_12_V_empty_n, matrix_e3x3_i_13_V_empty_n, matrix_e3x3_i_14_V_empty_n, matrix_e3x3_i_15_V_empty_n, exitcond2_reg_686, tmp_104_reg_732)
    begin
                ap_sig_bdd_323 <= (((matrix_e3x3_i_14_V_empty_n = ap_const_logic_0) and (exitcond2_reg_686 = ap_const_lv1_0) and (tmp_104_reg_732 = ap_const_lv4_E)) or ((exitcond2_reg_686 = ap_const_lv1_0) and (matrix_e3x3_i_13_V_empty_n = ap_const_logic_0) and (tmp_104_reg_732 = ap_const_lv4_D)) or ((exitcond2_reg_686 = ap_const_lv1_0) and (matrix_e3x3_i_12_V_empty_n = ap_const_logic_0) and (tmp_104_reg_732 = ap_const_lv4_C)) or ((exitcond2_reg_686 = ap_const_lv1_0) and (matrix_e3x3_i_11_V_empty_n = ap_const_logic_0) and (tmp_104_reg_732 = ap_const_lv4_B)) or ((exitcond2_reg_686 = ap_const_lv1_0) and (matrix_e3x3_i_10_V_empty_n = ap_const_logic_0) and (tmp_104_reg_732 = ap_const_lv4_A)) or ((exitcond2_reg_686 = ap_const_lv1_0) and (matrix_e3x3_i_9_V_empty_n = ap_const_logic_0) and (tmp_104_reg_732 = ap_const_lv4_9)) or ((exitcond2_reg_686 = ap_const_lv1_0) and (matrix_e3x3_i_8_V_empty_n = ap_const_logic_0) and (tmp_104_reg_732 = ap_const_lv4_8)) or ((exitcond2_reg_686 = ap_const_lv1_0) and (matrix_e3x3_i_7_V_empty_n = ap_const_logic_0) and (tmp_104_reg_732 = ap_const_lv4_7)) or ((exitcond2_reg_686 = ap_const_lv1_0) and (matrix_e3x3_i_6_V_empty_n = ap_const_logic_0) and (tmp_104_reg_732 = ap_const_lv4_6)) or ((exitcond2_reg_686 = ap_const_lv1_0) and (matrix_e3x3_i_5_V_empty_n = ap_const_logic_0) and (tmp_104_reg_732 = ap_const_lv4_5)) or ((exitcond2_reg_686 = ap_const_lv1_0) and (matrix_e3x3_i_4_V_empty_n = ap_const_logic_0) and (tmp_104_reg_732 = ap_const_lv4_4)) or ((exitcond2_reg_686 = ap_const_lv1_0) and (matrix_e3x3_i_3_V_empty_n = ap_const_logic_0) and (tmp_104_reg_732 = ap_const_lv4_3)) or ((exitcond2_reg_686 = ap_const_lv1_0) and (matrix_e3x3_i_2_V_empty_n = ap_const_logic_0) and (tmp_104_reg_732 = ap_const_lv4_2)) or ((exitcond2_reg_686 = ap_const_lv1_0) and (matrix_e3x3_i_1_V_empty_n = ap_const_logic_0) and (tmp_104_reg_732 = ap_const_lv4_1)) or ((exitcond2_reg_686 = ap_const_lv1_0) and (matrix_e3x3_i_0_V_empty_n = ap_const_logic_0) and (tmp_104_reg_732 = ap_const_lv4_0)) or ((exitcond2_reg_686 = ap_const_lv1_0) and (matrix_e3x3_i_15_V_empty_n = ap_const_logic_0) and not((tmp_104_reg_732 = ap_const_lv4_E)) and not((tmp_104_reg_732 = ap_const_lv4_D)) and not((tmp_104_reg_732 = ap_const_lv4_C)) and not((tmp_104_reg_732 = ap_const_lv4_B)) and not((tmp_104_reg_732 = ap_const_lv4_A)) and not((tmp_104_reg_732 = ap_const_lv4_9)) and not((tmp_104_reg_732 = ap_const_lv4_8)) and not((tmp_104_reg_732 = ap_const_lv4_7)) and not((tmp_104_reg_732 = ap_const_lv4_6)) and not((tmp_104_reg_732 = ap_const_lv4_5)) and not((tmp_104_reg_732 = ap_const_lv4_4)) and not((tmp_104_reg_732 = ap_const_lv4_3)) and not((tmp_104_reg_732 = ap_const_lv4_2)) and not((tmp_104_reg_732 = ap_const_lv4_1)) and not((tmp_104_reg_732 = ap_const_lv4_0))));
    end process;


    -- ap_sig_bdd_382 assign process. --
    ap_sig_bdd_382_assign_proc : process(exitcond2_reg_686, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_323)
    begin
                ap_sig_bdd_382 <= ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond2_reg_686 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323)));
    end process;


    -- ap_sig_bdd_390 assign process. --
    ap_sig_bdd_390_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_390 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_401 assign process. --
    ap_sig_bdd_401_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_401 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_411 assign process. --
    ap_sig_bdd_411_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_411 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_424 assign process. --
    ap_sig_bdd_424_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_424 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_473 assign process. --
    ap_sig_bdd_473_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_473 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_596 assign process. --
    ap_sig_bdd_596_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_596 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_660 assign process. --
    ap_sig_bdd_660_assign_proc : process(tmp_104_reg_732)
    begin
                ap_sig_bdd_660 <= (not((tmp_104_reg_732 = ap_const_lv4_E)) and not((tmp_104_reg_732 = ap_const_lv4_D)) and not((tmp_104_reg_732 = ap_const_lv4_C)) and not((tmp_104_reg_732 = ap_const_lv4_B)) and not((tmp_104_reg_732 = ap_const_lv4_A)) and not((tmp_104_reg_732 = ap_const_lv4_9)) and not((tmp_104_reg_732 = ap_const_lv4_8)) and not((tmp_104_reg_732 = ap_const_lv4_7)) and not((tmp_104_reg_732 = ap_const_lv4_6)) and not((tmp_104_reg_732 = ap_const_lv4_5)) and not((tmp_104_reg_732 = ap_const_lv4_4)) and not((tmp_104_reg_732 = ap_const_lv4_3)) and not((tmp_104_reg_732 = ap_const_lv4_2)) and not((tmp_104_reg_732 = ap_const_lv4_1)) and not((tmp_104_reg_732 = ap_const_lv4_0)));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_159)
    begin
        if (ap_sig_bdd_159) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_2_assign_proc : process(ap_sig_bdd_198)
    begin
        if (ap_sig_bdd_198) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg2_fsm_3 assign process. --
    ap_sig_cseq_ST_pp0_stg2_fsm_3_assign_proc : process(ap_sig_bdd_390)
    begin
        if (ap_sig_bdd_390) then 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg2_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg3_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg3_fsm_4_assign_proc : process(ap_sig_bdd_401)
    begin
        if (ap_sig_bdd_401) then 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg3_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg4_fsm_5 assign process. --
    ap_sig_cseq_ST_pp0_stg4_fsm_5_assign_proc : process(ap_sig_bdd_473)
    begin
        if (ap_sig_bdd_473) then 
            ap_sig_cseq_ST_pp0_stg4_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg4_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg5_fsm_6 assign process. --
    ap_sig_cseq_ST_pp0_stg5_fsm_6_assign_proc : process(ap_sig_bdd_411)
    begin
        if (ap_sig_bdd_411) then 
            ap_sig_cseq_ST_pp0_stg5_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg5_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg6_fsm_7 assign process. --
    ap_sig_cseq_ST_pp0_stg6_fsm_7_assign_proc : process(ap_sig_bdd_424)
    begin
        if (ap_sig_bdd_424) then 
            ap_sig_cseq_ST_pp0_stg6_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg6_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_8 assign process. --
    ap_sig_cseq_ST_st11_fsm_8_assign_proc : process(ap_sig_bdd_596)
    begin
        if (ap_sig_bdd_596) then 
            ap_sig_cseq_ST_st11_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_27)
    begin
        if (ap_sig_bdd_27) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;

    d_1_fu_570_p2 <= std_logic_vector(unsigned(d_phi_fu_518_p4) + unsigned(ap_const_lv5_1));

    -- d_phi_fu_518_p4 assign process. --
    d_phi_fu_518_p4_assign_proc : process(d_reg_514, exitcond2_reg_686, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, d_1_reg_690)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond2_reg_686 = ap_const_lv1_0))) then 
            d_phi_fu_518_p4 <= d_1_reg_690;
        else 
            d_phi_fu_518_p4 <= d_reg_514;
        end if; 
    end process;

    exitcond2_fu_564_p2 <= "1" when (d_phi_fu_518_p4 = ap_const_lv5_10) else "0";
    line_buffer_0_0_address0 <= tmp_reg_695(4 - 1 downto 0);

    -- line_buffer_0_0_ce0 assign process. --
    line_buffer_0_0_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            line_buffer_0_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_0_0_d0 <= ap_reg_phiprechg_tmp_4_reg_526pp0_it0;

    -- line_buffer_0_0_we0 assign process. --
    line_buffer_0_0_we0_assign_proc : process(exitcond2_reg_686, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_686 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            line_buffer_0_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_0_54_address0 <= tmp_fu_576_p1(4 - 1 downto 0);

    -- line_buffer_0_54_ce0 assign process. --
    line_buffer_0_54_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            line_buffer_0_54_ce0 <= ap_const_logic_1;
        else 
            line_buffer_0_54_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_0_address0 <= tmp_reg_695(4 - 1 downto 0);

    -- line_buffer_1_0_ce0 assign process. --
    line_buffer_1_0_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            line_buffer_1_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_0_d0 <= line_buffer_0_54_load_reg_748;

    -- line_buffer_1_0_we0 assign process. --
    line_buffer_1_0_we0_assign_proc : process(exitcond2_reg_686, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_686 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            line_buffer_1_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_1_54_address0 <= tmp_fu_576_p1(4 - 1 downto 0);

    -- line_buffer_1_54_ce0 assign process. --
    line_buffer_1_54_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            line_buffer_1_54_ce0 <= ap_const_logic_1;
        else 
            line_buffer_1_54_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_2_0_address0 <= tmp_reg_695(4 - 1 downto 0);

    -- line_buffer_2_0_ce0 assign process. --
    line_buffer_2_0_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            line_buffer_2_0_ce0 <= ap_const_logic_1;
        else 
            line_buffer_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_2_0_d0 <= line_buffer_1_54_load_reg_741;

    -- line_buffer_2_0_we0 assign process. --
    line_buffer_2_0_we0_assign_proc : process(exitcond2_reg_686, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_686 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)))) then 
            line_buffer_2_0_we0 <= ap_const_logic_1;
        else 
            line_buffer_2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    line_buffer_2_54_address0 <= tmp_reg_695(4 - 1 downto 0);

    -- line_buffer_2_54_ce0 assign process. --
    line_buffer_2_54_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            line_buffer_2_54_ce0 <= ap_const_logic_1;
        else 
            line_buffer_2_54_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e3x3_i_0_V_read assign process. --
    matrix_e3x3_i_0_V_read_assign_proc : process(exitcond2_reg_686, ap_reg_ppiten_pp0_it0, tmp_104_reg_732, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_323)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond2_reg_686 = ap_const_lv1_0) and (tmp_104_reg_732 = ap_const_lv4_0) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323)))) then 
            matrix_e3x3_i_0_V_read <= ap_const_logic_1;
        else 
            matrix_e3x3_i_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e3x3_i_10_V_read assign process. --
    matrix_e3x3_i_10_V_read_assign_proc : process(exitcond2_reg_686, ap_reg_ppiten_pp0_it0, tmp_104_reg_732, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_323)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond2_reg_686 = ap_const_lv1_0) and (tmp_104_reg_732 = ap_const_lv4_A) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323)))) then 
            matrix_e3x3_i_10_V_read <= ap_const_logic_1;
        else 
            matrix_e3x3_i_10_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e3x3_i_11_V_read assign process. --
    matrix_e3x3_i_11_V_read_assign_proc : process(exitcond2_reg_686, ap_reg_ppiten_pp0_it0, tmp_104_reg_732, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_323)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond2_reg_686 = ap_const_lv1_0) and (tmp_104_reg_732 = ap_const_lv4_B) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323)))) then 
            matrix_e3x3_i_11_V_read <= ap_const_logic_1;
        else 
            matrix_e3x3_i_11_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e3x3_i_12_V_read assign process. --
    matrix_e3x3_i_12_V_read_assign_proc : process(exitcond2_reg_686, ap_reg_ppiten_pp0_it0, tmp_104_reg_732, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_323)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond2_reg_686 = ap_const_lv1_0) and (tmp_104_reg_732 = ap_const_lv4_C) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323)))) then 
            matrix_e3x3_i_12_V_read <= ap_const_logic_1;
        else 
            matrix_e3x3_i_12_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e3x3_i_13_V_read assign process. --
    matrix_e3x3_i_13_V_read_assign_proc : process(exitcond2_reg_686, ap_reg_ppiten_pp0_it0, tmp_104_reg_732, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_323)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond2_reg_686 = ap_const_lv1_0) and (tmp_104_reg_732 = ap_const_lv4_D) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323)))) then 
            matrix_e3x3_i_13_V_read <= ap_const_logic_1;
        else 
            matrix_e3x3_i_13_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e3x3_i_14_V_read assign process. --
    matrix_e3x3_i_14_V_read_assign_proc : process(exitcond2_reg_686, ap_reg_ppiten_pp0_it0, tmp_104_reg_732, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_323)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond2_reg_686 = ap_const_lv1_0) and (tmp_104_reg_732 = ap_const_lv4_E) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323)))) then 
            matrix_e3x3_i_14_V_read <= ap_const_logic_1;
        else 
            matrix_e3x3_i_14_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e3x3_i_15_V_read assign process. --
    matrix_e3x3_i_15_V_read_assign_proc : process(exitcond2_reg_686, ap_reg_ppiten_pp0_it0, tmp_104_reg_732, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_323)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond2_reg_686 = ap_const_lv1_0) and not((tmp_104_reg_732 = ap_const_lv4_E)) and not((tmp_104_reg_732 = ap_const_lv4_D)) and not((tmp_104_reg_732 = ap_const_lv4_C)) and not((tmp_104_reg_732 = ap_const_lv4_B)) and not((tmp_104_reg_732 = ap_const_lv4_A)) and not((tmp_104_reg_732 = ap_const_lv4_9)) and not((tmp_104_reg_732 = ap_const_lv4_8)) and not((tmp_104_reg_732 = ap_const_lv4_7)) and not((tmp_104_reg_732 = ap_const_lv4_6)) and not((tmp_104_reg_732 = ap_const_lv4_5)) and not((tmp_104_reg_732 = ap_const_lv4_4)) and not((tmp_104_reg_732 = ap_const_lv4_3)) and not((tmp_104_reg_732 = ap_const_lv4_2)) and not((tmp_104_reg_732 = ap_const_lv4_1)) and not((tmp_104_reg_732 = ap_const_lv4_0)) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323)))) then 
            matrix_e3x3_i_15_V_read <= ap_const_logic_1;
        else 
            matrix_e3x3_i_15_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e3x3_i_1_V_read assign process. --
    matrix_e3x3_i_1_V_read_assign_proc : process(exitcond2_reg_686, ap_reg_ppiten_pp0_it0, tmp_104_reg_732, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_323)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond2_reg_686 = ap_const_lv1_0) and (tmp_104_reg_732 = ap_const_lv4_1) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323)))) then 
            matrix_e3x3_i_1_V_read <= ap_const_logic_1;
        else 
            matrix_e3x3_i_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e3x3_i_2_V_read assign process. --
    matrix_e3x3_i_2_V_read_assign_proc : process(exitcond2_reg_686, ap_reg_ppiten_pp0_it0, tmp_104_reg_732, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_323)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond2_reg_686 = ap_const_lv1_0) and (tmp_104_reg_732 = ap_const_lv4_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323)))) then 
            matrix_e3x3_i_2_V_read <= ap_const_logic_1;
        else 
            matrix_e3x3_i_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e3x3_i_3_V_read assign process. --
    matrix_e3x3_i_3_V_read_assign_proc : process(exitcond2_reg_686, ap_reg_ppiten_pp0_it0, tmp_104_reg_732, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_323)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond2_reg_686 = ap_const_lv1_0) and (tmp_104_reg_732 = ap_const_lv4_3) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323)))) then 
            matrix_e3x3_i_3_V_read <= ap_const_logic_1;
        else 
            matrix_e3x3_i_3_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e3x3_i_4_V_read assign process. --
    matrix_e3x3_i_4_V_read_assign_proc : process(exitcond2_reg_686, ap_reg_ppiten_pp0_it0, tmp_104_reg_732, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_323)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond2_reg_686 = ap_const_lv1_0) and (tmp_104_reg_732 = ap_const_lv4_4) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323)))) then 
            matrix_e3x3_i_4_V_read <= ap_const_logic_1;
        else 
            matrix_e3x3_i_4_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e3x3_i_5_V_read assign process. --
    matrix_e3x3_i_5_V_read_assign_proc : process(exitcond2_reg_686, ap_reg_ppiten_pp0_it0, tmp_104_reg_732, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_323)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond2_reg_686 = ap_const_lv1_0) and (tmp_104_reg_732 = ap_const_lv4_5) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323)))) then 
            matrix_e3x3_i_5_V_read <= ap_const_logic_1;
        else 
            matrix_e3x3_i_5_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e3x3_i_6_V_read assign process. --
    matrix_e3x3_i_6_V_read_assign_proc : process(exitcond2_reg_686, ap_reg_ppiten_pp0_it0, tmp_104_reg_732, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_323)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond2_reg_686 = ap_const_lv1_0) and (tmp_104_reg_732 = ap_const_lv4_6) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323)))) then 
            matrix_e3x3_i_6_V_read <= ap_const_logic_1;
        else 
            matrix_e3x3_i_6_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e3x3_i_7_V_read assign process. --
    matrix_e3x3_i_7_V_read_assign_proc : process(exitcond2_reg_686, ap_reg_ppiten_pp0_it0, tmp_104_reg_732, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_323)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond2_reg_686 = ap_const_lv1_0) and (tmp_104_reg_732 = ap_const_lv4_7) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323)))) then 
            matrix_e3x3_i_7_V_read <= ap_const_logic_1;
        else 
            matrix_e3x3_i_7_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e3x3_i_8_V_read assign process. --
    matrix_e3x3_i_8_V_read_assign_proc : process(exitcond2_reg_686, ap_reg_ppiten_pp0_it0, tmp_104_reg_732, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_323)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond2_reg_686 = ap_const_lv1_0) and (tmp_104_reg_732 = ap_const_lv4_8) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323)))) then 
            matrix_e3x3_i_8_V_read <= ap_const_logic_1;
        else 
            matrix_e3x3_i_8_V_read <= ap_const_logic_0;
        end if; 
    end process;


    -- matrix_e3x3_i_9_V_read assign process. --
    matrix_e3x3_i_9_V_read_assign_proc : process(exitcond2_reg_686, ap_reg_ppiten_pp0_it0, tmp_104_reg_732, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_323)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond2_reg_686 = ap_const_lv1_0) and (tmp_104_reg_732 = ap_const_lv4_9) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323)))) then 
            matrix_e3x3_i_9_V_read <= ap_const_logic_1;
        else 
            matrix_e3x3_i_9_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_104_fu_602_p1 <= d_phi_fu_518_p4(4 - 1 downto 0);
    tmp_67_cast_fu_588_p1 <= std_logic_vector(resize(unsigned(tmp_67_fu_582_p2),64));
    tmp_67_fu_582_p2 <= (d_phi_fu_518_p4 xor ap_const_lv5_10);
    tmp_68_fu_628_p3 <= (ap_const_lv59_1 & d_reg_514);
        tmp_69_cast1_fu_620_p1 <= std_logic_vector(resize(signed(tmp_67_reg_704),6));

    tmp_69_cast_fu_623_p1 <= std_logic_vector(resize(unsigned(tmp_69_cast1_fu_620_p1),64));
    tmp_69_fu_637_p3 <= (ap_const_lv59_2 & d_reg_514);
    tmp_70_fu_610_p2 <= std_logic_vector(signed(ap_const_lv7_50) + signed(tmp_cast1_fu_606_p1));
    tmp_71_cast_fu_616_p1 <= std_logic_vector(resize(unsigned(tmp_70_reg_736),64));
    tmp_71_fu_650_p3 <= (ap_const_lv59_3 & d_reg_514);
    tmp_72_fu_659_p3 <= (ap_const_lv59_4 & d_reg_514);
        tmp_73_cast1_fu_678_p1 <= std_logic_vector(resize(signed(ap_reg_ppstg_tmp_67_reg_704_pp0_it1),7));

    tmp_73_cast_fu_681_p1 <= std_logic_vector(resize(unsigned(tmp_73_cast1_fu_678_p1),64));
    tmp_73_fu_668_p2 <= std_logic_vector(signed(ap_const_lv8_90) + signed(tmp_cast_fu_646_p1));
    tmp_74_fu_593_p3 <= (ap_const_lv59_5 & d_phi_fu_518_p4);
    tmp_75_cast_fu_674_p1 <= std_logic_vector(resize(unsigned(tmp_73_reg_860),64));
    tmp_cast1_fu_606_p1 <= std_logic_vector(resize(unsigned(d_reg_514),7));
    tmp_cast_fu_646_p1 <= std_logic_vector(resize(unsigned(d_reg_514),8));
    tmp_fu_576_p1 <= std_logic_vector(resize(unsigned(d_phi_fu_518_p4),64));

    -- window_buffer_address0 assign process. --
    window_buffer_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, window_buffer_addr_10_reg_716, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_sig_cseq_ST_pp0_stg6_fsm_7, tmp_67_cast_fu_588_p1, tmp_71_cast_fu_616_p1, tmp_69_cast_fu_623_p1, ap_sig_cseq_ST_pp0_stg4_fsm_5, tmp_69_fu_637_p3, tmp_72_fu_659_p3, tmp_73_cast_fu_681_p1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2))) then 
            window_buffer_address0 <= tmp_73_cast_fu_681_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7))) then 
            window_buffer_address0 <= window_buffer_addr_10_reg_716;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6))) then 
            window_buffer_address0 <= tmp_72_fu_659_p3(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5))) then 
            window_buffer_address0 <= tmp_69_fu_637_p3(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            window_buffer_address0 <= tmp_69_cast_fu_623_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3))) then 
            window_buffer_address0 <= tmp_71_cast_fu_616_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            window_buffer_address0 <= tmp_67_cast_fu_588_p1(8 - 1 downto 0);
        else 
            window_buffer_address0 <= "XXXXXXXX";
        end if; 
    end process;


    -- window_buffer_address1 assign process. --
    window_buffer_address1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, window_buffer_addr_reg_710, window_buffer_addr_1_reg_845, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_sig_cseq_ST_pp0_stg6_fsm_7, tmp_74_fu_593_p3, tmp_68_fu_628_p3, ap_sig_cseq_ST_pp0_stg4_fsm_5, tmp_71_fu_650_p3, tmp_75_cast_fu_674_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7)) then 
                window_buffer_address1 <= tmp_75_cast_fu_674_p1(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6)) then 
                window_buffer_address1 <= tmp_71_fu_650_p3(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)) then 
                window_buffer_address1 <= tmp_68_fu_628_p3(8 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) then 
                window_buffer_address1 <= window_buffer_addr_1_reg_845;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) then 
                window_buffer_address1 <= window_buffer_addr_reg_710;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                window_buffer_address1 <= tmp_74_fu_593_p3(8 - 1 downto 0);
            else 
                window_buffer_address1 <= "XXXXXXXX";
            end if;
        else 
            window_buffer_address1 <= "XXXXXXXX";
        end if; 
    end process;


    -- window_buffer_ce0 assign process. --
    window_buffer_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_323, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_sig_cseq_ST_pp0_stg6_fsm_7, ap_sig_cseq_ST_pp0_stg4_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323))))) then 
            window_buffer_ce0 <= ap_const_logic_1;
        else 
            window_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- window_buffer_ce1 assign process. --
    window_buffer_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_sig_cseq_ST_pp0_stg6_fsm_7, ap_sig_cseq_ST_pp0_stg4_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7)))) then 
            window_buffer_ce1 <= ap_const_logic_1;
        else 
            window_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- window_buffer_d0 assign process. --
    window_buffer_d0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, line_buffer_1_54_load_reg_741, line_buffer_0_54_load_reg_748, ap_sig_cseq_ST_pp0_stg2_fsm_3, line_buffer_2_54_load_reg_855, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_sig_cseq_ST_pp0_stg6_fsm_7, ap_sig_cseq_ST_pp0_stg4_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)))) then 
            window_buffer_d0 <= line_buffer_2_54_load_reg_855;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            window_buffer_d0 <= line_buffer_0_54_load_reg_748;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)))) then 
            window_buffer_d0 <= line_buffer_1_54_load_reg_741;
        else 
            window_buffer_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- window_buffer_d1 assign process. --
    window_buffer_d1_assign_proc : process(ap_reg_ppiten_pp0_it0, line_buffer_1_54_load_reg_741, line_buffer_0_54_load_reg_748, window_buffer_load_reg_835, window_buffer_load_1_reg_840, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_sig_cseq_ST_pp0_stg6_fsm_7, ap_sig_cseq_ST_pp0_stg4_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7))) then 
            window_buffer_d1 <= window_buffer_load_1_reg_840;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6))) then 
            window_buffer_d1 <= line_buffer_1_54_load_reg_741;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4))) then 
            window_buffer_d1 <= window_buffer_load_reg_835;
        elsif ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)))) then 
            window_buffer_d1 <= line_buffer_0_54_load_reg_748;
        else 
            window_buffer_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- window_buffer_we0 assign process. --
    window_buffer_we0_assign_proc : process(exitcond2_reg_686, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond2_reg_686_pp0_it1, ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_sig_bdd_323, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_sig_cseq_ST_pp0_stg6_fsm_7, ap_sig_cseq_ST_pp0_stg4_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_686 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_686 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_686 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_686 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_686 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and ap_sig_bdd_323)) and (ap_reg_ppstg_exitcond2_reg_686_pp0_it1 = ap_const_lv1_0)))) then 
            window_buffer_we0 <= ap_const_logic_1;
        else 
            window_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- window_buffer_we1 assign process. --
    window_buffer_we1_assign_proc : process(exitcond2_reg_686, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg2_fsm_3, ap_sig_cseq_ST_pp0_stg3_fsm_4, ap_sig_cseq_ST_pp0_stg5_fsm_6, ap_sig_cseq_ST_pp0_stg6_fsm_7, ap_sig_cseq_ST_pp0_stg4_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_686 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg2_fsm_3)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_686 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg3_fsm_4)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_686 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg4_fsm_5)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_686 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg5_fsm_6)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond2_reg_686 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg6_fsm_7)))) then 
            window_buffer_we1 <= ap_const_logic_1;
        else 
            window_buffer_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
